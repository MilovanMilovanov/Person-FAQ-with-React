{"version":3,"sources":["data.js","Header.js","utils.js","FAQ.js","App.js","reportWebVitals.js","index.js"],"names":["QandA","title","answer","open","Header","titleColor","style","color","Math","random","toString","slice","FAQ","faq","index","toggleQandA","toggleTitleColor","className","onClick","App","useState","data","setQandA","setTitleColor","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJASeA,G,KATD,CACV,CAAEC,MAAO,2BAA4BC,OAAQ,oIAAqIC,MAAM,GACxL,CAAEF,MAAO,iCAAkCC,OAAQ,2GAA6GC,MAAM,GACtK,CAAEF,MAAO,0BAA2BC,OAAQ,+CAAgDC,MAAM,GAClG,CAAEF,MAAO,2BAA4BC,OAAQ,sGAAwGC,MAAM,GAC3J,CAAEF,MAAO,8BAA+BC,OAAQ,2FAA4FC,MAAM,GAClJ,CAAEF,MAAO,4BAA6BC,OAAQ,4FAA8FC,MAAM,K,WCEvIC,MANf,YAAiC,IAAfC,EAAc,EAAdA,WAERJ,EAAQ,sBAAMK,MAAO,CAAEC,MAAOF,ECH9B,IAAN,OAAWG,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,IDGqB,IAAtD,oBACd,OAAO,2CAAcV,EAAd,eEUIW,MAff,YAA6D,IAA9CC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBACpC,OACI,sBACIC,UAAW,QAAUJ,EAAIV,KAAO,OAAS,IACzCe,QAAS,WACLH,EAAYD,GACZE,EAAiBH,IAJzB,UAOI,oBAAII,UAAW,eAAf,SAAgCJ,EAAIZ,QACpC,qBAAKgB,UAAW,aAAhB,SAA+BJ,EAAIX,aC8BhCiB,MAlCf,WACI,MAA0BC,mBAASC,GAAnC,mBAAOrB,EAAP,KAAcsB,EAAd,KACA,EAA+BF,oBAAS,GAAxC,mBAAOnB,EAAP,KAAcsB,EAAd,KAEMP,EAAmB,SAAAH,GACrBA,EAAIV,KAAOoB,GAAc,GAAQA,GAAc,IAG7CR,EAAc,SAAAD,GAChBQ,EAAStB,EAAMwB,KAAI,SAACX,EAAKY,GAMrB,OAJIZ,EAAIV,KADJW,IAAUW,IACEZ,EAAIV,KAIbU,OAIf,OACI,sBAAKI,UAAU,MAAf,UACI,cAAC,EAAD,CAAQZ,WAAYJ,IACnBoB,EAAKG,KAAI,SAACX,EAAKC,GACZ,OACI,qBAAKG,UAAU,OAAf,SACI,cAAC,EAAD,CAAKJ,IAAKA,EAAKC,MAAOA,EAAOC,YAAaA,EAAaC,iBAAkBA,KADlDH,EAAIZ,cClBpCyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.892be715.chunk.js","sourcesContent":["const QandA = [\r\n    { title: 'How did you learn React?', answer: 'I started by reading the documentation and mixed it with online tutorials later on after i got the hang of some basic operations.', open: false },\r\n    { title: 'Why did you choose JavaScript?', answer: 'It gives me the freedom to mix my creative background with engineering, which i\\'m very keen on learning.', open: false },\r\n    { title: 'Do you like challenges?', answer: 'I certainly do and this is a small sample :)', open: false },\r\n    { title: 'What is your motivation?', answer: 'I take pride in everything i do, as i\\'m result driven person, that motivates me to get things done!', open: false },\r\n    { title: 'What do you expect from us?', answer: 'Possibilities, that will put me in a position of growth in my skillset and contribution!', open: false },\r\n    { title: 'Any final message for us?', answer: 'I enjoyed the process of creating this task, and i\\'m looking forward to the next step :)!', open: false }\r\n];\r\n\r\nexport default QandA;","import { getRandomColor } from './utils';\r\n\r\nfunction Header({ titleColor }) {\r\n\r\n    const title = <span style={{ color: titleColor ? getRandomColor() : '' }}> React</span >;\r\n    return <h1>My first {title} project</h1>\r\n}\r\n\r\nexport default Header\r\n","export function getRandomColor() {\r\n    return `#${Math.random().toString(16).slice(2, 8)}`;\r\n}\r\n\r\n","function FAQ({ faq, index, toggleQandA, toggleTitleColor }) {\r\n    return (\r\n        <div\r\n            className={'faq ' + (faq.open ? 'open' : '')}\r\n            onClick={() => {\r\n                toggleQandA(index);\r\n                toggleTitleColor(faq);\r\n            }}\r\n        >\r\n            <h3 className={'faq-question'}>{faq.title}</h3>\r\n            <div className={'faq-answer'}>{faq.answer}</div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default FAQ\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport data from './data';\r\nimport Header from './Header';\r\nimport FAQ from './FAQ';\r\n\r\nfunction App() {\r\n    const [QandA, setQandA] = useState(data);\r\n    const [title, setTitleColor] = useState(false);\r\n\r\n    const toggleTitleColor = faq => {\r\n        faq.open ? setTitleColor(true) : setTitleColor(false);\r\n    }\r\n\r\n    const toggleQandA = index => {\r\n        setQandA(QandA.map((faq, i) => {\r\n            if (index === i) {\r\n                faq.open = !faq.open;\r\n            } else {\r\n                faq.open = false;\r\n            }\r\n            return faq;\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header titleColor={title} />\r\n            {data.map((faq, index) => {\r\n                return (\r\n                    <div className=\"faqs\" key={faq.title}>\r\n                        <FAQ faq={faq} index={index} toggleQandA={toggleQandA} toggleTitleColor={toggleTitleColor} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}